// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TopicCommand.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TopicCommand.h"
#include "TopicCommandTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

TopicCommand::TopicCommand()
{
    // m_time_messege com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5c18298f
    m_time_messege = 0;
    // m_id_source com.eprosima.idl.parser.typecode.PrimitiveTypeCode@31f924f5
    m_id_source = 0;
    // m_id_target com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5579bb86
    m_id_target = 0;
    // m_code_command com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5204062d
    m_code_command = 0;
    // m_parameter com.eprosima.idl.parser.typecode.ArrayTypeCode@4fcd19b3
    memset(&m_parameter, 0, (256) * 1);

    // Just to register all known types
    registerTopicCommandTypes();
}

TopicCommand::~TopicCommand()
{





}

TopicCommand::TopicCommand(
        const TopicCommand& x)
{
    m_time_messege = x.m_time_messege;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_code_command = x.m_code_command;
    m_parameter = x.m_parameter;
}

TopicCommand::TopicCommand(
        TopicCommand&& x)
{
    m_time_messege = x.m_time_messege;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_code_command = x.m_code_command;
    m_parameter = std::move(x.m_parameter);
}

TopicCommand& TopicCommand::operator =(
        const TopicCommand& x)
{

    m_time_messege = x.m_time_messege;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_code_command = x.m_code_command;
    m_parameter = x.m_parameter;

    return *this;
}

TopicCommand& TopicCommand::operator =(
        TopicCommand&& x)
{

    m_time_messege = x.m_time_messege;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_code_command = x.m_code_command;
    m_parameter = std::move(x.m_parameter);

    return *this;
}

size_t TopicCommand::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((256) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t TopicCommand::getCdrSerializedSize(
        const TopicCommand& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((256) > 0)
    {
        current_alignment += ((256) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }


    return current_alignment - initial_alignment;
}

void TopicCommand::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_time_messege;
    scdr << m_id_source;
    scdr << m_id_target;
    scdr << m_code_command;
    scdr << m_parameter;


}

void TopicCommand::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_time_messege;
    dcdr >> m_id_source;
    dcdr >> m_id_target;
    dcdr >> m_code_command;
    dcdr >> m_parameter;

}

/*!
 * @brief This function sets a value in member time_messege
 * @param _time_messege New value for member time_messege
 */
void TopicCommand::time_messege(
        int64_t _time_messege)
{
    m_time_messege = _time_messege;
}

/*!
 * @brief This function returns the value of member time_messege
 * @return Value of member time_messege
 */
int64_t TopicCommand::time_messege() const
{
    return m_time_messege;
}

/*!
 * @brief This function returns a reference to member time_messege
 * @return Reference to member time_messege
 */
int64_t& TopicCommand::time_messege()
{
    return m_time_messege;
}

/*!
 * @brief This function sets a value in member id_source
 * @param _id_source New value for member id_source
 */
void TopicCommand::id_source(
        uint32_t _id_source)
{
    m_id_source = _id_source;
}

/*!
 * @brief This function returns the value of member id_source
 * @return Value of member id_source
 */
uint32_t TopicCommand::id_source() const
{
    return m_id_source;
}

/*!
 * @brief This function returns a reference to member id_source
 * @return Reference to member id_source
 */
uint32_t& TopicCommand::id_source()
{
    return m_id_source;
}

/*!
 * @brief This function sets a value in member id_target
 * @param _id_target New value for member id_target
 */
void TopicCommand::id_target(
        uint32_t _id_target)
{
    m_id_target = _id_target;
}

/*!
 * @brief This function returns the value of member id_target
 * @return Value of member id_target
 */
uint32_t TopicCommand::id_target() const
{
    return m_id_target;
}

/*!
 * @brief This function returns a reference to member id_target
 * @return Reference to member id_target
 */
uint32_t& TopicCommand::id_target()
{
    return m_id_target;
}

/*!
 * @brief This function sets a value in member code_command
 * @param _code_command New value for member code_command
 */
void TopicCommand::code_command(
        uint32_t _code_command)
{
    m_code_command = _code_command;
}

/*!
 * @brief This function returns the value of member code_command
 * @return Value of member code_command
 */
uint32_t TopicCommand::code_command() const
{
    return m_code_command;
}

/*!
 * @brief This function returns a reference to member code_command
 * @return Reference to member code_command
 */
uint32_t& TopicCommand::code_command()
{
    return m_code_command;
}

/*!
 * @brief This function copies the value in member parameter
 * @param _parameter New value to be copied in member parameter
 */
void TopicCommand::parameter(
        const std::array<char, 256>& _parameter)
{
    m_parameter = _parameter;
}

/*!
 * @brief This function moves the value in member parameter
 * @param _parameter New value to be moved in member parameter
 */
void TopicCommand::parameter(
        std::array<char, 256>&& _parameter)
{
    m_parameter = std::move(_parameter);
}

/*!
 * @brief This function returns a constant reference to member parameter
 * @return Constant reference to member parameter
 */
const std::array<char, 256>& TopicCommand::parameter() const
{
    return m_parameter;
}

/*!
 * @brief This function returns a reference to member parameter
 * @return Reference to member parameter
 */
std::array<char, 256>& TopicCommand::parameter()
{
    return m_parameter;
}

size_t TopicCommand::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool TopicCommand::isKeyDefined()
{
    return false;
}

void TopicCommand::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}
