// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TopicStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TopicStatus.h"
#include "TopicStatusTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

TopicStatus::TopicStatus()
{
    // m_time_messege com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5c18298f
    m_time_messege = 0;
    // m_id_source com.eprosima.idl.parser.typecode.PrimitiveTypeCode@31f924f5
    m_id_source = 0;
    // m_id_target com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5579bb86
    m_id_target = 0;
    // m_code_command com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5204062d
    m_code_command = 0;
    // m_code_status com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4fcd19b3
    m_code_status = 0;
    // m_description com.eprosima.idl.parser.typecode.ArrayTypeCode@376b4233
    memset(&m_description, 0, (256) * 1);

    // Just to register all known types
    registerTopicStatusTypes();
}

TopicStatus::~TopicStatus()
{






}

TopicStatus::TopicStatus(
        const TopicStatus& x)
{
    m_time_messege = x.m_time_messege;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_code_command = x.m_code_command;
    m_code_status = x.m_code_status;
    m_description = x.m_description;
}

TopicStatus::TopicStatus(
        TopicStatus&& x)
{
    m_time_messege = x.m_time_messege;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_code_command = x.m_code_command;
    m_code_status = x.m_code_status;
    m_description = std::move(x.m_description);
}

TopicStatus& TopicStatus::operator =(
        const TopicStatus& x)
{

    m_time_messege = x.m_time_messege;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_code_command = x.m_code_command;
    m_code_status = x.m_code_status;
    m_description = x.m_description;

    return *this;
}

TopicStatus& TopicStatus::operator =(
        TopicStatus&& x)
{

    m_time_messege = x.m_time_messege;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_code_command = x.m_code_command;
    m_code_status = x.m_code_status;
    m_description = std::move(x.m_description);

    return *this;
}

size_t TopicStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((256) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t TopicStatus::getCdrSerializedSize(
        const TopicStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((256) > 0)
    {
        current_alignment += ((256) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }


    return current_alignment - initial_alignment;
}

void TopicStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_time_messege;
    scdr << m_id_source;
    scdr << m_id_target;
    scdr << m_code_command;
    scdr << m_code_status;
    scdr << m_description;


}

void TopicStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_time_messege;
    dcdr >> m_id_source;
    dcdr >> m_id_target;
    dcdr >> m_code_command;
    dcdr >> m_code_status;
    dcdr >> m_description;

}

/*!
 * @brief This function sets a value in member time_messege
 * @param _time_messege New value for member time_messege
 */
void TopicStatus::time_messege(
        int64_t _time_messege)
{
    m_time_messege = _time_messege;
}

/*!
 * @brief This function returns the value of member time_messege
 * @return Value of member time_messege
 */
int64_t TopicStatus::time_messege() const
{
    return m_time_messege;
}

/*!
 * @brief This function returns a reference to member time_messege
 * @return Reference to member time_messege
 */
int64_t& TopicStatus::time_messege()
{
    return m_time_messege;
}

/*!
 * @brief This function sets a value in member id_source
 * @param _id_source New value for member id_source
 */
void TopicStatus::id_source(
        uint32_t _id_source)
{
    m_id_source = _id_source;
}

/*!
 * @brief This function returns the value of member id_source
 * @return Value of member id_source
 */
uint32_t TopicStatus::id_source() const
{
    return m_id_source;
}

/*!
 * @brief This function returns a reference to member id_source
 * @return Reference to member id_source
 */
uint32_t& TopicStatus::id_source()
{
    return m_id_source;
}

/*!
 * @brief This function sets a value in member id_target
 * @param _id_target New value for member id_target
 */
void TopicStatus::id_target(
        uint32_t _id_target)
{
    m_id_target = _id_target;
}

/*!
 * @brief This function returns the value of member id_target
 * @return Value of member id_target
 */
uint32_t TopicStatus::id_target() const
{
    return m_id_target;
}

/*!
 * @brief This function returns a reference to member id_target
 * @return Reference to member id_target
 */
uint32_t& TopicStatus::id_target()
{
    return m_id_target;
}

/*!
 * @brief This function sets a value in member code_command
 * @param _code_command New value for member code_command
 */
void TopicStatus::code_command(
        uint32_t _code_command)
{
    m_code_command = _code_command;
}

/*!
 * @brief This function returns the value of member code_command
 * @return Value of member code_command
 */
uint32_t TopicStatus::code_command() const
{
    return m_code_command;
}

/*!
 * @brief This function returns a reference to member code_command
 * @return Reference to member code_command
 */
uint32_t& TopicStatus::code_command()
{
    return m_code_command;
}

/*!
 * @brief This function sets a value in member code_status
 * @param _code_status New value for member code_status
 */
void TopicStatus::code_status(
        uint32_t _code_status)
{
    m_code_status = _code_status;
}

/*!
 * @brief This function returns the value of member code_status
 * @return Value of member code_status
 */
uint32_t TopicStatus::code_status() const
{
    return m_code_status;
}

/*!
 * @brief This function returns a reference to member code_status
 * @return Reference to member code_status
 */
uint32_t& TopicStatus::code_status()
{
    return m_code_status;
}

/*!
 * @brief This function copies the value in member description
 * @param _description New value to be copied in member description
 */
void TopicStatus::description(
        const std::array<char, 256>& _description)
{
    m_description = _description;
}

/*!
 * @brief This function moves the value in member description
 * @param _description New value to be moved in member description
 */
void TopicStatus::description(
        std::array<char, 256>&& _description)
{
    m_description = std::move(_description);
}

/*!
 * @brief This function returns a constant reference to member description
 * @return Constant reference to member description
 */
const std::array<char, 256>& TopicStatus::description() const
{
    return m_description;
}

/*!
 * @brief This function returns a reference to member description
 * @return Reference to member description
 */
std::array<char, 256>& TopicStatus::description()
{
    return m_description;
}

size_t TopicStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;









    return current_align;
}

bool TopicStatus::isKeyDefined()
{
    return false;
}

void TopicStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}
