// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BenchmarkVector.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "BenchmarkVector.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

BenchmarkVector::BenchmarkVector()
{
    // m_time_service com.eprosima.idl.parser.typecode.PrimitiveTypeCode@a67c67e
    m_time_service = 0;
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3327bd23
    m_index = 0;
    // m_data com.eprosima.idl.parser.typecode.SequenceTypeCode@4e1d422d


}

BenchmarkVector::~BenchmarkVector()
{



}

BenchmarkVector::BenchmarkVector(
        const BenchmarkVector& x)
{
    m_time_service = x.m_time_service;
    m_index = x.m_index;
    m_data = x.m_data;
}

BenchmarkVector::BenchmarkVector(
        BenchmarkVector&& x)
{
    m_time_service = x.m_time_service;
    m_index = x.m_index;
    m_data = std::move(x.m_data);
}

BenchmarkVector& BenchmarkVector::operator =(
        const BenchmarkVector& x)
{

    m_time_service = x.m_time_service;
    m_index = x.m_index;
    m_data = x.m_data;

    return *this;
}

BenchmarkVector& BenchmarkVector::operator =(
        BenchmarkVector&& x)
{

    m_time_service = x.m_time_service;
    m_index = x.m_index;
    m_data = std::move(x.m_data);

    return *this;
}

bool BenchmarkVector::operator ==(
        const BenchmarkVector& x) const
{

    return (m_time_service == x.m_time_service && m_index == x.m_index && m_data == x.m_data);
}

bool BenchmarkVector::operator !=(
        const BenchmarkVector& x) const
{
    return !(*this == x);
}

size_t BenchmarkVector::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);




    return current_alignment - initial_alignment;
}

size_t BenchmarkVector::getCdrSerializedSize(
        const BenchmarkVector& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }




    return current_alignment - initial_alignment;
}

void BenchmarkVector::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_time_service;
    scdr << m_index;
    scdr << m_data;

}

void BenchmarkVector::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_time_service;
    dcdr >> m_index;
    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member time_service
 * @param _time_service New value for member time_service
 */
void BenchmarkVector::time_service(
        int64_t _time_service)
{
    m_time_service = _time_service;
}

/*!
 * @brief This function returns the value of member time_service
 * @return Value of member time_service
 */
int64_t BenchmarkVector::time_service() const
{
    return m_time_service;
}

/*!
 * @brief This function returns a reference to member time_service
 * @return Reference to member time_service
 */
int64_t& BenchmarkVector::time_service()
{
    return m_time_service;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void BenchmarkVector::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t BenchmarkVector::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& BenchmarkVector::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void BenchmarkVector::data(
        const std::vector<int32_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void BenchmarkVector::data(
        std::vector<int32_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<int32_t>& BenchmarkVector::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<int32_t>& BenchmarkVector::data()
{
    return m_data;
}

size_t BenchmarkVector::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool BenchmarkVector::isKeyDefined()
{
    return false;
}

void BenchmarkVector::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
